{"version":3,"sources":["Preview.js","Editor.js","App.js","serviceWorker.js","index.js"],"names":["Preview","html","className","renderHTML","require","Editor","code","onChange","id","mode","width","height","value","theme","showPrintMargin","name","setOptions","showLineNumbers","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","tabSize","editorProps","$blockScrolling","converter","Showdown","tables","simplifiedAutoLink","strikethrough","tasklists","App","useState","setCode","setHtml","useEffect","makeHtml","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAgBeA,G,MAXC,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACd,OACI,yBAAKC,UAAU,kCACX,wBAAIA,UAAU,QAAd,gCACA,yBAAKA,UAAU,eACVC,IAAWF,O,+BCJ5BG,EAAQ,KACRA,EAAQ,KAER,IA0BeC,EA1BA,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SACnB,OACI,yBAAKL,UAAW,0BAA0BM,GAAG,UACzC,wBAAIN,UAAU,QAAd,oBACA,qDACI,kBAAC,IAAD,CACIO,KAAK,WACLC,MAAM,OACNC,OAAO,MACPC,MAAON,EACPO,MAAM,SACNC,iBAAiB,EACjBP,SAAUA,EACVQ,KAAK,aACLC,WAAY,CACRC,iBAAiB,EACjBC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,QAAS,GAEbC,YAAa,CAAEC,iBAAiB,OCvB9CC,EAAY,IAAIC,YAAmB,CACrCC,QAAQ,EACRC,oBAAoB,EACpBC,eAAe,EACfC,WAAW,IAyBAC,EAtBH,WAAO,IAAD,EACUC,mBAAS,sBADnB,mBACPzB,EADO,KACD0B,EADC,OAEUD,mBAAS,IAFnB,mBAEP9B,EAFO,KAEDgC,EAFC,KAYhB,OAJEC,qBAAU,WACND,EAAQT,EAAUW,SAAS7B,MAC5B,CAACA,IAGJ,yBAAKJ,UAAU,OACX,yBAAKA,UAAU,cACZ,kBAAC,EAAD,CAAQI,KAAMA,EAAMC,SAZV,SAACK,GACdoB,EAAQpB,GACRqB,EAAQT,EAAUW,SAASvB,OAWxB,kBAAC,EAAD,CAASX,KAAMA,OClBNmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.45ddd1d0.chunk.js","sourcesContent":["import React from 'react'\nimport renderHTML from 'react-render-html';\nimport './Preview.css'\n\n\nconst Preview = ({html}) => {\n    return (\n        <div className=\"preview border border-dark p-2\">\n            <h4 className=\"my-3\">Preview your Markdown here: </h4>\n            <div className=\"content m-4\">\n                {renderHTML(html)}\n            </div>\n        </div>\n    )\n}\n\nexport default Preview","import React from 'react'\nimport './Editor.css';\nimport AceEditor from \"react-ace\";\n//not sure why I need this import, but it removes some errors, has to do with Ace Editor itself?\nimport \"ace-builds/webpack-resolver\";\n\nrequire(\"ace-builds/src-noconflict/mode-markdown\");\nrequire(\"ace-builds/src-noconflict/theme-github\");\n\nconst Editor = ({code, onChange}) => {\n    return (\n        <div className= \"border border-dark px-4\" id=\"editor\">\n            <h4 className=\"my-4\">Markdown Editor </h4>\n            <p>Enter your code below!</p>\n                <AceEditor\n                    mode=\"markdown\"\n                    width=\"100%\"\n                    height=\"80%\"\n                    value={code}\n                    theme=\"github\"\n                    showPrintMargin={false}\n                    onChange={onChange}\n                    name=\"ace-editor\"\n                    setOptions={{ \n                        showLineNumbers: true,\n                        enableBasicAutocompletion: false,\n                        enableLiveAutocompletion: false,\n                        enableSnippets: false,\n                        tabSize: 2,\n                     }}\n                    editorProps={{ $blockScrolling: false }}\n                />\n            </div>\n    )\n}\nexport default Editor","import React, {useState, useEffect} from 'react';\nimport * as Showdown from \"showdown\";\nimport './App.css';\nimport Preview from './Preview';\nimport Editor from './Editor';\n\n//markdown converter\nconst converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true\n  });\n   \nconst App = () => {\n    const [code, setCode] = useState(\"**Hello world!!!**\");\n    const [html, setHtml] = useState(\"\");\n    const onChange = (value) => {\n        setCode(value)\n        setHtml(converter.makeHtml(value))\n    }\n    //useEffect is to prepopulate preview\n    useEffect(()=> {\n        setHtml(converter.makeHtml(code))\n    }, [code])\n\n  return (\n    <div className=\"App\">\n        <div className=\"container \">\n           <Editor code={code} onChange={onChange}/>\n           <Preview html={html}/>\n       </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}